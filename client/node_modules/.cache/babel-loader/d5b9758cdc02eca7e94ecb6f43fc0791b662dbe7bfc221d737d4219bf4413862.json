{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ehb27\\\\Documents\\\\GitHub\\\\SoftwareEngineeringProject\\\\client\\\\src\\\\components\\\\Payment.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { PayPalScriptProvider, PayPalButtons, usePayPalScriptReducer } from '@paypal/react-paypal-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst amount = \"2\";\nconst currency = \"USD\";\nconst style = {\n  \"layout\": \"vertical\"\n};\n\n// Custom component to wrap the PayPalButtons and handle currency changes\nconst ButtonWrapper = _ref => {\n  _s();\n  let {\n    currency,\n    showSpinner\n  } = _ref;\n  // usePayPalScriptReducer can be use only inside children of PayPalScriptProviders\n  // This is the main reason to wrap the PayPalButtons in a new component\n  const [{\n    options,\n    isPending\n  }, dispatch] = usePayPalScriptReducer();\n  useEffect(() => {\n    dispatch({\n      type: \"resetOptions\",\n      value: {\n        ...options,\n        currency: currency\n      }\n    });\n  }, [currency, showSpinner]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showSpinner && isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(PayPalButtons, {\n      style: style,\n      disabled: false,\n      forceReRender: [amount, currency, style],\n      fundingSource: undefined,\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: currency,\n              value: amount\n            }\n          }]\n        }).then(orderId => {\n          // Your code here after create the order\n          return orderId;\n        });\n      },\n      onApprove: function (data, actions) {\n        return actions.order.capture().then(function () {\n          // Your code here after capture the order\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n_s(ButtonWrapper, \"97F4ge0M9DD6AP5/rccpuT1ImVM=\", false, function () {\n  return [usePayPalScriptReducer];\n});\n_c = ButtonWrapper;\nexport default function Payment() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"750px\",\n      minHeight: \"200px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"test\",\n        components: \"buttons\",\n        currency: \"USD\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        currency: currency,\n        showSpinner: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n}\n_c2 = Payment;\nvar _c, _c2;\n$RefreshReg$(_c, \"ButtonWrapper\");\n$RefreshReg$(_c2, \"Payment\");","map":{"version":3,"names":["useEffect","PayPalScriptProvider","PayPalButtons","usePayPalScriptReducer","amount","currency","style","ButtonWrapper","showSpinner","options","isPending","dispatch","type","value","undefined","data","actions","order","create","purchase_units","currency_code","then","orderId","capture","Payment","maxWidth","minHeight","components"],"sources":["C:/Users/ehb27/Documents/GitHub/SoftwareEngineeringProject/client/src/components/Payment.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { \n  PayPalScriptProvider, \n  PayPalButtons, \n  usePayPalScriptReducer \n} from '@paypal/react-paypal-js';\n\nconst amount = \"2\";\nconst currency = \"USD\";\nconst style = {\"layout\":\"vertical\"};\n\n// Custom component to wrap the PayPalButtons and handle currency changes\nconst ButtonWrapper = ({ currency, showSpinner }) => {\n  // usePayPalScriptReducer can be use only inside children of PayPalScriptProviders\n  // This is the main reason to wrap the PayPalButtons in a new component\n  const [{ options, isPending }, dispatch] = usePayPalScriptReducer();\n\n  useEffect(() => {\n      dispatch({\n          type: \"resetOptions\",\n          value: {\n              ...options,\n              currency: currency,\n          },\n      });\n  }, [currency, showSpinner]);\n\n\n  return (<>\n          { (showSpinner && isPending) && <div className=\"spinner\" /> }\n          <PayPalButtons\n              style={style}\n              disabled={false}\n              forceReRender={[amount, currency, style]}\n              fundingSource={undefined}\n              createOrder={(data, actions) => {\n                  return actions.order\n                      .create({\n                          purchase_units: [\n                              {\n                                  amount: {\n                                      currency_code: currency,\n                                      value: amount,\n                                  },\n                              },\n                          ],\n                      })\n                      .then((orderId) => {\n                          // Your code here after create the order\n                          return orderId;\n                      });\n              }}\n              onApprove={function (data, actions) {\n                  return actions.order.capture().then(function () {\n                      // Your code here after capture the order\n                  });\n              }}\n          />\n      </>\n  );\n}\n\nexport default function Payment() {\nreturn (\n  <div style={{ maxWidth: \"750px\", minHeight: \"200px\" }}>\n          <PayPalScriptProvider\n              options={{\n                  \"client-id\": \"test\",\n                  components: \"buttons\",\n                  currency: \"USD\"\n              }}\n          >\n      <ButtonWrapper\n                  currency={currency}\n                  showSpinner={false}\n              />\n    </PayPalScriptProvider>\n  </div>\n);\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SACEC,oBAAoB,EACpBC,aAAa,EACbC,sBAAsB,QACjB,yBAAyB;AAAC;AAAA;AAEjC,MAAMC,MAAM,GAAG,GAAG;AAClB,MAAMC,QAAQ,GAAG,KAAK;AACtB,MAAMC,KAAK,GAAG;EAAC,QAAQ,EAAC;AAAU,CAAC;;AAEnC;AACA,MAAMC,aAAa,GAAG,QAA+B;EAAA;EAAA,IAA9B;IAAEF,QAAQ;IAAEG;EAAY,CAAC;EAC9C;EACA;EACA,MAAM,CAAC;IAAEC,OAAO;IAAEC;EAAU,CAAC,EAAEC,QAAQ,CAAC,GAAGR,sBAAsB,EAAE;EAEnEH,SAAS,CAAC,MAAM;IACZW,QAAQ,CAAC;MACLC,IAAI,EAAE,cAAc;MACpBC,KAAK,EAAE;QACH,GAAGJ,OAAO;QACVJ,QAAQ,EAAEA;MACd;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACA,QAAQ,EAAEG,WAAW,CAAC,CAAC;EAG3B,oBAAQ;IAAA,WACGA,WAAW,IAAIE,SAAS,iBAAK;MAAK,SAAS,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3D,QAAC,aAAa;MACV,KAAK,EAAEJ,KAAM;MACb,QAAQ,EAAE,KAAM;MAChB,aAAa,EAAE,CAACF,MAAM,EAAEC,QAAQ,EAAEC,KAAK,CAAE;MACzC,aAAa,EAAEQ,SAAU;MACzB,WAAW,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAK;QAC5B,OAAOA,OAAO,CAACC,KAAK,CACfC,MAAM,CAAC;UACJC,cAAc,EAAE,CACZ;YACIf,MAAM,EAAE;cACJgB,aAAa,EAAEf,QAAQ;cACvBQ,KAAK,EAAET;YACX;UACJ,CAAC;QAET,CAAC,CAAC,CACDiB,IAAI,CAAEC,OAAO,IAAK;UACf;UACA,OAAOA,OAAO;QAClB,CAAC,CAAC;MACV,CAAE;MACF,SAAS,EAAE,UAAUP,IAAI,EAAEC,OAAO,EAAE;QAChC,OAAOA,OAAO,CAACC,KAAK,CAACM,OAAO,EAAE,CAACF,IAAI,CAAC,YAAY;UAC5C;QAAA,CACH,CAAC;MACN;IAAE;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA,gBACH;AAET,CAAC;AAAA,GAhDKd,aAAa;EAAA,QAG0BJ,sBAAsB;AAAA;AAAA,KAH7DI,aAAa;AAkDnB,eAAe,SAASiB,OAAO,GAAG;EAClC,oBACE;IAAK,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,SAAS,EAAE;IAAQ,CAAE;IAAA,uBAC9C,QAAC,oBAAoB;MACjB,OAAO,EAAE;QACL,WAAW,EAAE,MAAM;QACnBC,UAAU,EAAE,SAAS;QACrBtB,QAAQ,EAAE;MACd,CAAE;MAAA,uBAEV,QAAC,aAAa;QACF,QAAQ,EAAEA,QAAS;QACnB,WAAW,EAAE;MAAM;QAAA;QAAA;QAAA;MAAA;IACrB;MAAA;MAAA;MAAA;IAAA;EACW;IAAA;IAAA;IAAA;EAAA,QACnB;AAER;AAAC,MAjBuBmB,OAAO;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}