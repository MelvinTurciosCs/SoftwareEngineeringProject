{"ast":null,"code":"/**\r\n * @licence MIT\r\n * @author Sergey Melyukov\r\n */\n\nvar allSettled = require('promise-ext-settled');\n\n/**\r\n * Image preloader\r\n *\r\n * @class ImagePreloader\r\n * @constructor\r\n *\r\n * @param {(String|HTMLImageElement)=} fallbackImage\r\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\r\n */\nvar ImagePreloader = function (fallbackImage, onProgress) {\n  /**\r\n   * @type {?function({status: boolean, value: HTMLImageElement})}\r\n   */\n  this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n  /**\r\n   * @type {?String|HTMLImageElement}\r\n   */\n  this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n\n/**\r\n * Do simple image preloading.\r\n *\r\n * @param {!(String|HTMLImageElement)} imageSource\r\n *\r\n * @return {Promise} will be resolved/rejected with HTMLImageElement\r\n */\nImagePreloader.simplePreload = function (imageSource) {\n  return new Promise(function (resolve, reject) {\n    var img;\n    if (imageSource instanceof HTMLImageElement) {\n      img = imageSource;\n      if (!img.complete) {\n        img.onload = resolve.bind(null, img);\n        img.onerror = img.onabort = reject.bind(null, img);\n      } else if (img.naturalHeight) {\n        resolve(img);\n      } else {\n        reject(img);\n      }\n    } else if (typeof imageSource === 'string') {\n      img = new Image();\n      img.onload = resolve.bind(null, img);\n      img.onerror = img.onabort = reject.bind(null, img);\n      img.src = imageSource;\n    }\n  });\n};\n\n/**\r\n * Preload image.\r\n *\r\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\r\n * As well, origin image url will be placed to 'data-fail-src' attribute.\r\n *\r\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\r\n *\r\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\r\n *\r\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\r\n *\r\n *     status-property - is the status of image loading\r\n *     status-property will be true if:\r\n *      - original image loading is ok\r\n *      - or original image loading is fail but fallback-image loading is ok\r\n *     status-property will be false if:\r\n *      - original image loading is fail\r\n *      - or original image loading is fail and fallback-image loading is fail\r\n *\r\n *     value-property - is the image that was loaded\r\n */\nImagePreloader.prototype.preload = function (args) {\n  var that = this,\n    imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n  imagesToLoad = imagesToLoad.map(function (imageSource) {\n    return ImagePreloader.simplePreload(imageSource).catch(function (brokenImage) {\n      if (that.fallbackImage) {\n        return ImagePreloader.simplePreload(that.fallbackImage).then(function (fallbackImage) {\n          brokenImage.setAttribute('data-fail-src', brokenImage.src);\n          brokenImage.src = fallbackImage.src;\n          return brokenImage;\n        }, function () {\n          return Promise.reject(brokenImage);\n        });\n      }\n      return Promise.reject(brokenImage);\n    });\n  });\n  return allSettled(imagesToLoad, that.onProgress);\n};\nmodule.exports = ImagePreloader;","map":{"version":3,"names":["allSettled","require","ImagePreloader","fallbackImage","onProgress","HTMLImageElement","simplePreload","imageSource","Promise","resolve","reject","img","complete","onload","bind","onerror","onabort","naturalHeight","Image","src","prototype","preload","args","that","imagesToLoad","Array","concat","apply","slice","call","arguments","map","catch","brokenImage","then","setAttribute","module","exports"],"sources":["C:/Users/Melvi/OneDrive/Documents/Fall 2022/Fundamentals of Software Engineering/SoftwareEngineeringProject/node_modules/image-preloader/src/main.js"],"sourcesContent":["/**\r\n * @licence MIT\r\n * @author Sergey Melyukov\r\n */\r\n\r\nvar allSettled = require('promise-ext-settled');\r\n\r\n/**\r\n * Image preloader\r\n *\r\n * @class ImagePreloader\r\n * @constructor\r\n *\r\n * @param {(String|HTMLImageElement)=} fallbackImage\r\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\r\n */\r\nvar ImagePreloader = function(fallbackImage, onProgress) {\r\n    /**\r\n     * @type {?function({status: boolean, value: HTMLImageElement})}\r\n     */\r\n    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\r\n    /**\r\n     * @type {?String|HTMLImageElement}\r\n     */\r\n    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\r\n};\r\n\r\n/**\r\n * Do simple image preloading.\r\n *\r\n * @param {!(String|HTMLImageElement)} imageSource\r\n *\r\n * @return {Promise} will be resolved/rejected with HTMLImageElement\r\n */\r\nImagePreloader.simplePreload = function(imageSource) {\r\n    return new Promise(function(resolve, reject) {\r\n        var img;\r\n\r\n        if (imageSource instanceof HTMLImageElement) {\r\n            img = imageSource;\r\n\r\n            if (!img.complete) {\r\n                img.onload = resolve.bind(null, img);\r\n                img.onerror = img.onabort = reject.bind(null, img);\r\n            } else if (img.naturalHeight) {\r\n                resolve(img);\r\n            } else {\r\n                reject(img);\r\n            }\r\n        } else if (typeof imageSource === 'string') {\r\n            img = new Image();\r\n            img.onload = resolve.bind(null, img);\r\n            img.onerror = img.onabort = reject.bind(null, img);\r\n            img.src = imageSource;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Preload image.\r\n *\r\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\r\n * As well, origin image url will be placed to 'data-fail-src' attribute.\r\n *\r\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\r\n *\r\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\r\n *\r\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\r\n *\r\n *     status-property - is the status of image loading\r\n *     status-property will be true if:\r\n *      - original image loading is ok\r\n *      - or original image loading is fail but fallback-image loading is ok\r\n *     status-property will be false if:\r\n *      - original image loading is fail\r\n *      - or original image loading is fail and fallback-image loading is fail\r\n *\r\n *     value-property - is the image that was loaded\r\n */\r\nImagePreloader.prototype.preload = function(args) {\r\n    var that = this,\r\n        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\r\n\r\n    imagesToLoad = imagesToLoad.map(function(imageSource) {\r\n        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\r\n            if (that.fallbackImage) {\r\n                return ImagePreloader.simplePreload(that.fallbackImage)\r\n                    .then(function(fallbackImage) {\r\n                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\r\n                        brokenImage.src = fallbackImage.src;\r\n\r\n                        return brokenImage;\r\n                    }, function() {\r\n                        return Promise.reject(brokenImage);\r\n                    });\r\n            }\r\n\r\n            return Promise.reject(brokenImage);\r\n        });\r\n    });\r\n\r\n    return allSettled(imagesToLoad, that.onProgress);\r\n};\r\n\r\nmodule.exports = ImagePreloader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}